Array

--Every data type has its own companion array type 
--e.g., integer has an integer[] array type, character has character[] array type, etc. 
--In case you define your own data type, 
--PostgreSQL creates a corresponding array type in the background for you.

--PostgreSQL allows you to define a column to be an array of any valid data type including built-in type, 
--user-defined type or enumerated type.

--The following CREATE TABLE statement creates the contacts table with the phones column is defined as an array of text.

CREATE TABLE contacts (
	id serial PRIMARY KEY, -- identity
	name VARCHAR (100),
	phones TEXT []
);

select * from contacts
--The phones column is a one-dimensional array that holds various phone numbers that a contact may have.

--Insert PostgreSQL array values
--The following statement inserts a new contact into the contacts table.

INSERT INTO contacts (name, phones)
VALUES('John Doe',ARRAY [ '(91)-589-5846','(91)-589-5555' ]);

INSERT INTO contacts (name, phones) VALUES('Simion Kate', Array[ '(91)-589-5847','(91)-589-5567' ]);

select * from contacts
--We used the ARRAY constructor to construct an array and insert it into the contacts table. 
--You can also use curly braces as follows:

INSERT INTO contacts (name, phones)VALUES('Lily Bush','{"(91)-589-5841"}'),
      ('William Gate','{"(91)-589-5842","(91)-589-58423"}');

INSERT INTO contacts (name, phones)VALUES('Shuan Mike','{"(91)-589-6789"}')

--The statement above inserts two rows into the contacts table. 
--Notice that when you use curly braces, you use single quotes ' to wrap the array and double quotes " 
--to wrap text array items.

--Query array data
--You use the SELECT statement to query array data as follows:

SELECT * FROM contacts;

--postgresql array query data
--We access array elements using the subscript within square brackets [0,1]. 
--By default, PostgreSQL uses one-based numbering for array elements. 
--It means the first array element starts with number 1. 

--Example:
--array phone =[1223,34456,7891]
--phone =[1,2,3]
--phone [3] = 7891

--Suppose, we want to get the contact’s name and the first phone number, we use the following query:
SELECT *,phones [ 2 ] FROM contacts;

--postgresql array query array item
--We can use array element in the WHERE clause as the condition to filter the rows. 
--For example, to find out who has the phone number (91)-589-58423 as the second phone number, we use the following query.
select * from contacts;
SELECT * FROM contacts WHERE phones [ 2 ] = '(91)-589-58423';

--postgresql array element in where clause
--Modifying PostgreSQL array
--PostgreSQL allows you to update each element of an array or  the whole array. The following statement updates the second phone number of William Gate.
select * from contacts 
UPDATE contacts SET phones [3] = '(91)-222-1111' WHERE ID = 2;


SELECT id,name,phones [ 2 ] FROM contacts WHERE id = 3;

--postgresql array update
--The following statement updates an array as a whole.

UPDATE contacts SET phones = '{"(408)-589-5843"}' WHERE id = 3;

--We verify the update using the following statement.

SELECT name,phones FROM contacts WHERE id = 3;

--postgresql array select
--Search in PostgreSQL Array
--Suppose, we want to know who has the phone number (91)-589-5555 regardless of position of the phone number in the phones array, we use ANY() function as follows:

SELECT name,phones FROM contacts WHERE '(91)-589-5555' = ANY (phones);

--postgresql array any function
--Expand Arrays
--PostgreSQL provides the unnest() function to expand an array to a list of rows. 
--For example,  the following query expands all phone numbers of the phones array.

SELECT *,unnest(phones) FROM contacts;

--postgresql array unnest function

select * from contacts

delete from contacts where phones [3] ='(91)-222-1111'

delete from contacts where id =3

****************************************************************************************************************************************************

hstore

--The hstore module implements the hstore data type for storing key-value pairs in a single value.

--The hstore data type is very useful in many cases, such as semi-structured data or rows 
--with many attributes that are rarely queried.

--Notice that keys and values are just text strings only.

--Enable PostgreSQL hstore extension
--Before working with the hstore data type, 
--you need to enable the hstore extension which loads the contrib module to your PostgreSQL instance.

CREATE EXTENSION hstore;

drop EXTENSION hstore
--Create a table with hstore data type

--id is the primary key that identifies the book.
--title is the title of the products
--attr stores attributes of the book such as ISBN, weight, and paperback. 
--The data type of the attr column is hstore.
--We use the CREATE TABLE statement to create the books table as follows:

CREATE TABLE books (
	id serial primary key,
	title VARCHAR (255),
	attribute1 hstore
);

select * from books

--Insert data into PostgreSQL hstore column
--We use the INSERT statement to insert data into the hstore column as follows:

INSERT INTO books (title, attribute1)
VALUES
	(
		'PostgreSQL Tutorial',
		'"paperback" => "243",
	   "publisher" => "postgresqltutorial.com",
	   "language"  => "English",
	   "ISBN-13"   => "978-1449370000",
		 "weight"    => "11.2 ounces"'
	);

--The data that we insert into the hstore column is a list of comma-separated key =>value pairs. 
--Both keys and values are quoted using double quotes (“”).

--Insert one more row.

INSERT INTO books (title, attribute1)
VALUES
	(
		'PostgreSQL Cheat Sheet',
		'
"paperback" => "5",
"publisher" => "postgresqltutorial.com",
"language"  => "English",
"ISBN-13"   => "978-1449370001",
"weight"    => "1 ounces"'
	);
select * from books
--Query data from an hstore column
--Querying data from an hstore column is similar to querying data from a column 
--with native data type using the SELECT statement as follows:

SELECT attribute1 FROM books;

--postgresql hstore query
--Query value for a specific key
--Postgresql hstore provides the -> operator to query the value of a specific key from an hstore column. 
--For example, if we want to know ISBN-13 of all available books in the books table, 
--we can use the -> operator as follows:

SELECT *,attribute1 -> 'ISBN-13' AS isbn FROM books;
SELECT *,attribute1 -> 'weight' AS isbn FROM books;

--postgresql hstore query key
--Use value in the WHERE clause
--You can use the -> operator in the WHERE clause to filter the rows
--whose values of the hstore column match the input value. 
--For example, the following  query retrieves the title and weight of a book that has ISBN-13
--value matches 978-1449370000:
select * from books

SELECT title, attribute1 -> 'weight' AS weight FROM books 
WHERE attribute1 -> 'ISBN-13' = '978-1449370000';

--postgresql hstore WHERE clause
--Add key-value pairs to existing rows
--With hstore column, you can easily add a new key-value pair to existing rows e.g., 
--you can add free shipping key to the attr column of the books table as follows:
select * from books

UPDATE books SET attribute1 = attribute1 || '"freeshipping"=>"yes"' :: hstore;

--Now, you can check to see if the "freeshipping" => "yes" pair has been added successfully.

SELECT title,attribute1 -> 'freeshipping' AS freeshipping FROM books;

--postgresql hstore add key-value
--Update existing key-value pair
--You can update existing key-value pair using the UPDATE statement. The following statement updates the value of the "freeshipping" key to "no".

UPDATE books SET attribute1 = attribute1 || '"freeshipping"=>"no"' :: hstore;

--Remove existing key-value pair
--PostgreSQL allows you to remove existing key-value pair from an hstore column. 
--For example, the following statement removes the "freeshipping"=>"no" key-value pair in the attr column.
select * from books

UPDATE books SET attribute1 = delete(attribute1, 'freeshipping');

--Check for a specific key in hstore column
--You can check for a specific key in an hstore column using the ? operator in the WHERE clause. 
--For example, the following statement returns all rows with attr contains key publisher.

SELECT title,attribute1->'weight' as publisher,  attribute1 FROM	books WHERE attribute1 ? 'publisher'; --Single key

--postgesql hstore check key
--Check for a key-value pair
--You can query based on the hstore key-value pair using the @> operator. 
--The following statement retrieves all rows 
--which attr column contains a key-value pair that matches "weight"=>"11.2 ounces".

SELECT title FROM books WHERE attribute1 @> '"weight"=>"11.2 ounces"' :: hstore; --Key:vlaue Pair

--postgresql hstore check key-pair
--Query rows that contain multiple specified keys
--You can query the rows whose hstore column contain multiple keys using ?& operator. 
--For example, you can get books where attr column contains both language and weight keys.
select * from books
SELECT id,title FROM books WHERE attribute1 ?& ARRAY [ 'language', 'weight','ISBN-13' ]; --Multiple Keys

--postgresql hstore check multiple keys
--To check if a row whose hstore column contains any key from a list of keys, 
--you use the ?| operator instead of the ?& operator.

--Get all keys from an hstore column
--To get all keys from an hstore column, you use the akeys() function as follows:
select * from books 
SELECT akeys (attribute1) FROM books;

--postgresql hstore akeys function
--Or you can use the  skey() function if you want PostgreSQL to return the result as a set.

SELECT id,skeys (attribute1) FROM books;

--postgresql hstore skeys function

--Get all values from an hstore columnLike keys, 
--you can get all values from an hstore column using the  avals() function in the form of arrays.

SELECT avals (attribute1) FROM books;

--postgresql hstore avals function
--Or you can use the  svals() function if you want to get the result as a set.

SELECT svals (attribute1) FROM books;

--postgresql hstore svals
--Convert hstore data to JSON
--PostgreSQL provides the hstore_to_json() function to convert hstore data to JSON. 
--See the following statement:
select * from books;
SELECT title,hstore_to_json (attribute1) json FROM books;

--postgresql hstore to json

--Convert hstore data to sets
--To convert hstore data to sets, you use the  each(). function as follows:

SELECT title,(EACH(attribute1)). * FROM books;

****************************************************************************************************************************************************
--Data Types 
--JSON
--JSON stands for JavaScript Object Notation. 
--JSON is an open standard format that consists of key-value pairs.
--The main usage of JSON is to transport data between a server and a web application. 
--Unlike other formats, JSON is human-readable text.

select * from orders;
CREATE TABLE orders (
	id serial NOT NULL PRIMARY KEY,
	information json NOT NULL
);
drop table orders;
--in hstore we can store key: value but in json we can store key:value /key:{key:value,key:value}
--single row 
INSERT INTO orders (information) VALUES('{ "customer": "John Doe", "items": {"product": "Beer","qty": 6}}');

--Multiple row 
INSERT INTO orders (information)
VALUES('{ "customer": "Lily Bush", "items": {"product": "Diaper","qty": 24}}'),
      ('{ "customer": "Josh William", "items": {"product": "Toy Car","qty": 1}}'),
      ('{ "customer": "Mary Clark", "items": {"product": "Toy Train","qty": 2}}');

--Querying JSON data
--To query JSON data, you use the SELECT statement, which is similar to querying other native data types:
select * from orders
SELECT information FROM orders;

 
--PostgreSQL returns a result set in the form of JSON.
--PostgreSQL provides two native operators -> and ->> to help you query JSON data.
--•	The operator -> returns JSON object field by key.
--•	The operator ->> returns JSON object field by text.

--The following query uses the operator -> to get all customers in form of JSON:
SELECT information -> 'customer' AS customer FROM orders;

 
--And the following query uses operator ->> to get all customers in form of text:

SELECT information ->> 'customer' AS customer FROM orders;

 
--Because -> operator returns a JSON object, you can change it with 
--the operator ->> to retrieve a specific node. 
--For example, the following statement returns all products sold:
select * from orders
SELECT *,information -> 'items' ->> 'product' as product FROM orders ORDER BY product;

 
--First  information -> 'items' returns items as JSON objects. 
--And then information->'items'->>'product' returns all products as text.


--Use JSON operator in WHERE clause
--We can use the JSON operators in WHERE clause to filter the returning rows. 
--For example, to find out who bought Diaper, we use the following query:

SELECT information ->> 'customer' AS customer FROM orders
WHERE information -> 'items' ->> 'product' = 'Diaper';

 
--To find out who bought two products at a time, we use the following query:

SELECT  information ->> 'customer' AS customer,information -> 'items' ->> 'product' AS product FROM orders
WHERE CAST ( information -> 'items' ->> 'qty' AS INTEGER) = 2;

 
--Notice that we used the type cast to convert the qty field into INTEGER type and compare it with two.
--Apply aggregate functions to JSON data
--We can apply aggregate functions such as MIN, MAX, AVERAGE, SUM, etc., to JSON data.
--For example, the following statement returns minimum quantity, maximum quantity, average quantity and the total quantity of products sold.

SELECT 
   MIN (CAST (information -> 'items' ->> 'qty' AS INTEGER)),
   MAX (CAST (information -> 'items' ->> 'qty' AS INTEGER)),
   SUM (CAST (information -> 'items' ->> 'qty' AS INTEGER)),
   AVG (CAST (information -> 'items' ->> 'qty' AS INTEGER))
FROM orders;
select * from orders

 
--PostgreSQL JSON functions
--PostgreSQL provides us with some functions to help you process JSON data.

--json_each function
--The json_each() function allows us to expand the outermost JSON object into a set of key-value pairs. 
select * from orders
SELECT json_each (information) FROM orders;

 
--If you want to get a set of key-value pairs as text, you use the json_each_text() function instead.
--json_object_keys function
SELECT json_each_text (information->'items') FROM orders;
--To get a set of keys in the outermost JSON object, you use the json_object_keys() function. 
--The following query returns all keys of the nested items object in the info column
select * from orders
SELECT json_object_keys (information->'items') FROM orders;

 
--json_typeof function
--The json_typeof() function returns type of the outermost JSON value as a string.
--It can be number, boolean, null, object, array, and string.

--The following query return the data type of the items:
select * from orders
SELECT json_typeof (information->'items') FROM orders;

 
--The following query returns the data type of the qty field of the nested items JSON object.

SELECT json_typeof (information->'items'->'product') FROM orders;
***********************************************************************************************************************************************
--UUID Data Type

--UUID stands for Universal Unique Identifier defined by RFC 4122 and other related standards. 
--A UUID value is 128-bit quantity generated by an algorithm that make 
--it unique in the known universe using the same algorithm. 

--The following shows some examples of the UUID values:
40e6215d-b5c6-4896-987c-f30f3678f608
6ecd8c99-4036-403d-bf84-cf8400f67836
3f333df6-90a4-4fda-8dd3-9485d27cee36

--A UUID is a sequence of 32 digits of hexadecimal digits represented in groups separated by hyphens.
--Because of its uniqueness feature, you often found UUID in the distributed systems 
--because it guarantees a better uniqueness than the SERIAL data type 
--which generates only unique values within a single database.

--Generating UUID values
--PostgreSQL allows you store and compare UUID values but it does not include functions for generating 
--the UUID values in its core.

--Instead, it relies on the third-party modules that provide specific algorithms to generate UUIDs. 
--For example the uuid-ossp module provides some handy functions that implement standard algorithms 
--for generating UUIDs.

--To install the uuid-ossp module, you use the CREATE EXTENSION statement as follows:

CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

--To generate the UUID values based on the combination of computer’s MAC address, 
--current timestamp, and a random value, you use the uuid_generate_v1() function:

SELECT uuid_generate_v1(); --"cf5a283e-8556-11ec-a797-7c70db33ba11","d941a82c-8556-11ec-a798-7c70db33ba11"
--Code language: SQL (Structured Query Language) (sql)

--If you want to generate a UUID value solely based on random numbers, 
--you can use the uuid_generate_v4() function. For example:

SELECT uuid_generate_v4(); --"6e6f76fc-9329-4950-817e-374d778262e8","b20d2f37-2e10-4fd9-9fba-d63659338692"

--Creating a table with UUID column
--We will create a table whose primary key is UUID data type. 
--In addition, the values of the primary key column will be generated automatically 
--using the uuid_generate_v4() function.

--Create the contacts table using the following statement:

CREATE TABLE contacts (
    contact_id uuid DEFAULT uuid_generate_v4 (),
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    phone VARCHAR,
    PRIMARY KEY (contact_id)
);

--In this statement, the data type of the contact_id column is UUID. 
--The contact_id column has a default values provided by the uuid_generate_v4() function,
--therefore, whenever you insert new row without specifying the value for the contact_id column, 
--PostgreSQL will call the uuid_generate_v4() function to generate the value for it.

--inserting some data into the contacts table:
select * from contacts 
INSERT INTO contacts (first_name,last_name,email,phone)
VALUES('simon','kate','simon.kate@mexample.com','987654321'),
    ('Jane','Smith','jane.smith@example.com','408-237-2344'),
    ('Alex','Smith','alex.smith@example.com','408-237-2343');

SELECT * FROM contacts;
*****************************************************************************************************************************************************
--user-defined data type using CREATE DOMAIN and CREATE TYPE statements.

--Besides built-in data types, PostgreSQL allows you to create user-defined data types 
--through the following statements:
--1.CREATE DOMAIN :creates a user-defined data type with constraints such as NOT NULL, CHECK, etc.
--2.CREATE TYPE : creates a composite type used in stored procedures as the data types of returned values.

--CREATE DOMAIN statement
--A domain is a data type with optional constraints e.g.,NOT NULL and CHECK. 
--A domain has a unique name within the schema scope.
--Domains are useful for centralizing the management of fields with common constraints. 
--For example, some tables may have the same column that do not accept NULL and spaces.

--The following statement create a table named mailing_list:

CREATE TABLE mailing_list (
    id SERIAL PRIMARY KEY,
    first_name VARCHAR NOT NULL,
    last_name VARCHAR NOT NULL,
    email VARCHAR NOT NULL,
    CHECK (
        first_name !~ '\s'
        AND last_name !~ '\s'
    ))

	select * from mailing_list
);
Drop table mailing_list
--In this table, both first_name and last_name columns do not accept null and spaces. 
--Instead of defining the CHECK constraint,
--you can create a contact_name domain and reuse it in multiple columns.

--The following statement uses the CREATE DOMAIN to create 
--a new domain called contact_name with the VARCHAR datatype and do not accept NULL and spaces:

CREATE DOMAIN contact_name AS VARCHAR NOT NULL CHECK (value !~ '\s');

--And you use contact_name as the datatype of the first_name and last_name columns as a 
--regular built-in type:

CREATE TABLE mailing_list (
    id serial PRIMARY KEY,
    first_name contact_name,
    last_name contact_name,
    email VARCHAR NOT NULL
);
select * from mailing_list
--The following statement inserts a new row into the mailing_list table:

INSERT INTO mailing_list (first_name, last_name, email)
VALUES('JameV','Doe','jame.doe@example.com');

--issued the following error because the first name contains a space:

--ERROR:  value for domain contact_name violates check constraint "contact_name_check"

--The following statement works because it does not violate any constraints of the contact_name type:

INSERT INTO mailing_list (first_name, last_name, email)
VALUES('Jane','Doe','jane.doe@example.com');

--To change or remove a domain, you use the ALTER DOMAIN or DROP DOMAIN respectively.

--CREATE TYPE
--The CREATE TYPE statement allows you to create a composite type, 
--which can be used as the return type of a function.

--Suppose you want to have a function that returns several values: film_id, title, and release_year. 
--The first step is to create a type e.g., film_summary as follows:

CREATE TYPE film_summary AS (
    film_id INT,
    title VARCHAR,
    release_year SMALLINT
); 

--Second, use the film_summary data type as the return type of a function:

CREATE OR REPLACE FUNCTION get_film_summary (f_id INT) 
    RETURNS film_summary AS 
$$ 
SELECT
    film_id,
    title,
    release_year
FROM
    film
WHERE
    film_id = f_id ; 
$$ 
LANGUAGE SQL; 

--call get_ functionfilm_summary function
SELECT * FROM get_film_summary (40);

--user-defined type example
--To change a user-defined type, you use the ALTER TYPE statement. 
--To remove a user-defined type, you use the DROP TYPE statement.
